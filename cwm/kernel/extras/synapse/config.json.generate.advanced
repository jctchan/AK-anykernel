cat << CTAG
{
    name:Advanced,
    elements:[
      { SPane:{
		title:"Low Memory Killer",
		description:"LMK Minfree controls how much memory each app type can hold, and is responsible for memory management for multitasking; all values are multiplied by 256 pages."
      }},
`
	for LMK in 1 2 3 4 5 6; do
		echo '{ SSeekBar:{ '
			case $LMK in
			1)
				echo 'title:"Foreground App"' ;;
			2)
				echo 'title:"Visible App"' ;;
			3)
				echo 'title:"Secondary Server"' ;;
			4)
				echo 'title:"Hidden App"' ;;
			5)
				echo 'title:"Content Provider"' ;;
			6)
				echo 'title:"Empty App"' ;;
			esac
			echo ', action:"minfree '${LMK}'",
			min:10, max:200 }},'
	done
`
      { SPane:{
		title:"LMK Whitelist",
		description:"Allows certain apps to be exempt from being killed until absolutely necessary to avoid out-of-memory (OOM)."
      }},
	{ SCheckBox:{
                label:"Do-Not-Kill System Processes List",
                default:`cat /sys/module/lowmemorykiller/parameters/donotkill_sysproc`,
                action:"generic /sys/module/lowmemorykiller/parameters/donotkill_sysproc"
        }},
	{ SOptionList:{
		title:"Exempt System Processes",
		action:"whitelist set sys",
		default:`/res/synapse/actions/whitelist set sys`,
		values:[
`
			for SYSPROC in \`/res/synapse/actions/whitelist list sys\`; do
			  echo "\"$SYSPROC\","
			done
`
		]
	}},
	{ SCheckBox:{
                label:"Do-Not-Kill User Processes List",
                default:`cat /sys/module/lowmemorykiller/parameters/donotkill_proc`,
                action:"generic /sys/module/lowmemorykiller/parameters/donotkill_proc"
        }},
	{ SOptionList:{
		title:"Exempt User Processes",
		action:"whitelist set user",
		default:`/res/synapse/actions/whitelist set user`,
 		values:[
`
			for PROC in \`/res/synapse/actions/whitelist list user\`; do
			  echo "\"$PROC\","
			done
`
		]
	}},
      { SDescription:{
        description:"The process lists above are view only. To add processes, check the Synapse sdcard folder for the parsed files and add one process name per line. Lists updated on reboot.",
      }},
      { SPane:{
		title:"Kernel Entropy"
      }},
	{ SLiveLabel:{
		title:"Entropy Available",
		refresh:1000,
		style:italic,
		action:"live entropy"
	}},
	{ SSeekBar:{
		title:"Read Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/read_wakeup_threshold`,
				action:"generic /proc/sys/kernel/random/read_wakeup_threshold"
	}},
	{ SSeekBar:{
		title:"Write Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/write_wakeup_threshold`,
				action:"generic /proc/sys/kernel/random/write_wakeup_threshold"
	}},
      { SPane:{
		title:"Kernel Sched"
      }},
	{ SSeekBar:{
		title:"RT Period",
		max:2000000, min:10000, step:10000, unit:" us",
		default:`cat /proc/sys/kernel/sched_rt_period_us`,
				action:"generic /proc/sys/kernel/sched_rt_period_us"
	}},
	{ SSeekBar:{
		title:"RT Runtime",
		max:2000000, min:10000, step:10000, unit:" us",
		default:`cat /proc/sys/kernel/sched_rt_runtime_us`,
				action:"generic /proc/sys/kernel/sched_rt_runtime_us"
	}},
      { SPane:{
		title:"Other"
      }},
	{ SSeekBar:{
		title:"Randomize VA Space", max:2,
		default:`cat /proc/sys/kernel/randomize_va_space`,
				action:"generic /proc/sys/kernel/randomize_va_space"
	}},
	{ SSeekBar:{
		title:"FileSystem Lease Break Time",
		max:100, min:1, unit:" s",
		default:`cat /proc/sys/fs/lease-break-time`,
				action:"generic /proc/sys/fs/lease-break-time"
	}},
    ]
}
CTAG
